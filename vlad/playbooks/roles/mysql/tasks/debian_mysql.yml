---
- name: install mysql packages
  apt: pkg={{ item }} state=installed
  sudo: true
  with_items:
   - mysql-client
   - mysql-common
   - mysql-server
   - python-mysqldb

# set up mysql variables
- name: create MySQL configuration file
  action: template src=debian_mysql.my.cnf.j2 dest=/etc/mysql/conf.d/my.cnf
  sudo: true
  register: mysql_conf
  notify:
  - restart mysql

- name: remove the InnoDB log files in case InnoDB settings have been changed (1/2).
  file: path=/var/lib/mysql/ib_logfile0 state=absent
  when: mysql_conf.changed
  sudo: true

- name: remove the InnoDB log files in case InnoDB settings have been changed (2/2).
  file: path=/var/lib/mysql/ib_logfile1 state=absent
  when: mysql_conf.changed
  sudo: true

- name: change main settings for skip-external-locking
  lineinfile: dest=/etc/mysql/my.cnf regexp="^#?skip-external-locking" insertafter="skip-external-locking" line="#skip-external-locking"
  sudo: true
  notify:
    - restart mysql

- name: change main settings for bind-address
  lineinfile: dest=/etc/mysql/my.cnf regexp="^#?bind-address" insertafter="bind-address" line="#bind-address"
  sudo: true
  notify:
    - restart mysql

- name: get iptables rules
  shell: iptables -L
  register: iptablesrules
  failed_when: "iptablesrules.rc != 0"
  changed_when: false
  always_run: yes
  sudo: true

- name: add mysql to iptables
  command: iptables -A INPUT -p tcp --dport {{ mysql_port }} -j  ACCEPT  -m comment --comment "mysql"
  sudo: true
  when: iptablesrules.stdout.find("mysql") == -1
  notify:
   - save iptables

# MySQL database setup, this does the equivalent of mysql_secure_installation.
- name: set the root password.
  mysql_user: name=root password={{ mysql_root_password }} host=localhost

- name: config for easy access as root user
  template: src=mysql_root.my.cnf.j2 dest=/root/.my.cnf
  when: "'{{ user }}' == 'root'"

- name: config for easy access as root user
  template: src=mysql_root.my.cnf.j2 dest=/home/{{ user }}/.my.cnf
  when: "'{{ user }}' != 'root'"

- name: delete anonymous MySQL server user for {{ server_hostname }}
  mysql_user: name="" host="{{ server_hostname }}" state="absent" login_user=root login_password={{ mysql_root_password }}

- name: delete anonymous MySQL server user for localhost
  mysql_user: name="" state="absent" host="{{ server_hostname }}" login_user="root" login_password="{{ mysql_root_password }}"

- name: secure the MySQL root user for IPV6 localhost (::1)
  mysql_user: name="root" password="{{ mysql_root_password }}" host="{{ server_hostname }}" login_user=root login_password={{ mysql_root_password }}

- name: secure the MySQL root user for IPV4 localhost (127.0.0.1)
  mysql_user: name="root" password="{{ mysql_root_password }}" host="{{ server_hostname }}" login_user=root login_password={{ mysql_root_password }}

- name: secure the MySQL root user for localhost domain (localhost)
  mysql_user: name="root" password="{{ mysql_root_password }}" host="{{ server_hostname }}" login_user=root login_password={{ mysql_root_password }}

- name: secure the MySQL root user for {{ server_hostname }} domain
  mysql_user: name="root" password="{{ mysql_root_password }}" host="{{ server_hostname }}" login_user=root login_password={{ mysql_root_password }}

- name: remove the MySQL test database
  mysql_db: db=test state=absent login_user=root login_password={{ mysql_root_password }}

# set up default database
- name: create application database
  mysql_db: name={{ dbname }} state=present login_password={{ mysql_root_password }} login_user=root collation=utf8_general_ci

- name: create application database user
  mysql_user: name={{ dbuser }} password={{ dbpass }} priv="{{ dbname }}.*:ALL" host="{{ item }}" state=present login_password={{ mysql_root_password }} login_user=root append_privs=yes
  with_items:
   - '{{ local_ipv4_address.ansible_facts.ansible_default_ipv4.address }}'
   - 127.0.0.1
   - localhost

# Optional database import

- name: import database (default source file)
  mysql_db: name={{ dbname }} state=import target=/var/www/site/vlad_aux/db_io/vlad_up.sql.gz login_password={{ mysql_root_password }} login_user=root
  when: db_import_up
  ignore_errors: yes
  tags: mysql_import

- name: import database (specified source file)
  mysql_db: name={{ dbname }} state=import target=/var/www/site/vlad_aux/db_io/{{ db_import_up }} login_password={{ mysql_root_password }} login_user=root
  when: db_import_up != true and db_import_up != false
  ignore_errors: yes
  tags: mysql_import
