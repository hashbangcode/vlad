---
- name: install mysql packages
  apt: pkg={{ item }} state=installed
  sudo: true
  with_items: "{{ mysql_pkgs }}"

- name: make sure mysql starts
  command: chkconfig mysqld on
  when: ansible_os_family == "RedHat"
  sudo: true

# set up mysql variables
- name: create MySQL configuration file
  action: template
    src=mysql.my.cnf.j2
    dest="{{ mysql_config_dir }}/my.cnf"
  sudo: true
  register: mysql_conf
  notify:
  - restart mysql

- name: remove the InnoDB log files in case InnoDB settings have been changed (1/2).
  file: path="{{ mysql_install_dir }}/ib_logfile0 state=absent"
  when: mysql_conf.changed
  sudo: true

- name: remove the InnoDB log files in case InnoDB settings have been changed (2/2).
  file: path="{{ mysql_install_dir }}/ib_logfile1 state=absent"
  when: mysql_conf.changed
  sudo: true

- name: change main settings for skip-external-locking
  lineinfile: dest="{{ mysql_config_dir }}/my.cnf" regexp="^#?skip-external-locking" insertafter="skip-external-locking" line="#skip-external-locking"
  sudo: true
  notify:
    - restart mysql

- name: change main settings for bind-address
  lineinfile: dest="{{ mysql_config_dir }}/my.cnf" regexp="^#?bind-address" insertafter="bind-address" line="#bind-address"
  sudo: true
  notify:
    - restart mysql

- name: get iptables rules
  shell: iptables -L
  register: iptablesrules
  failed_when: "iptablesrules.rc != 0"
  changed_when: false
  always_run: yes
  sudo: true

- name: add mysql to iptables
  command: iptables -A INPUT -p tcp --dport {{ mysql_port }} -j  ACCEPT  -m comment --comment "mysql"
  sudo: true
  when: iptablesrules.stdout.find("mysql") == -1
  notify:
   - save iptables

- name: force restart mysql
  service: name=mysqld state=restarted
  when: ansible_os_family == "RedHat"
  sudo: true

# MySQL database setup, this does the equivalent of mysql_secure_installation.
- name: set the root password.
  mysql_user: 
    name=root 
    password={{ mysql_root_password }}
    host=localhost
    login_user=root 
    login_password={{ mysql_root_password }}
    check_implicit_admin=true 
    priv=*.*:ALL,GRANT

- name: config for easy access as root user
  template: src=mysql_root.my.cnf.j2 dest=/root/.my.cnf
  when: "'{{ user }}' == 'root'"
  sudo: true

- name: config for easy access as root user
  template: src=mysql_root.my.cnf.j2 dest=/home/{{ user }}/.my.cnf
  when: "'{{ user }}' != 'root'"

- name: delete anonymous MySQL server user for {{ server_hostname }}
  mysql_user: name="" host="{{ server_hostname }}" state="absent" login_user=root login_password={{ mysql_root_password }}

- name: delete anonymous MySQL server user for localhost
  mysql_user: name="" state="absent" host="{{ server_hostname }}" login_user="root" login_password="{{ mysql_root_password }}"

- name: secure the MySQL root user for localhost
  mysql_user: name="root" password="{{ mysql_root_password }}" host="localhost" login_user=root login_password={{ mysql_root_password }}

- name: allow root remote access on boxipaddress
  mysql_user: name="root" password="{{ mysql_root_password }}" priv="*.*:ALL" host={{ boxipaddress }}

- name: remove the MySQL test database
  mysql_db: db=test state=absent login_user=root login_password={{ mysql_root_password }}

# set up default database(s)
- name: create application database(s)
  mysql_db: name={{ item }} state=present login_password={{ mysql_root_password }} login_user=root collation=utf8_general_ci
  with_items: dbname

- name: create application database(s) user(s)
  mysql_user: name={{ dbuser }} password={{ dbpass }} priv="{{ item[0] }}.*:ALL" host="{{ item[1] }}" state=present login_password={{ mysql_root_password }} login_user=root append_privs=yes
  with_nested:
    - dbname
    - mysql_hosts

# Optional database import

- name: get current database state
  shell: mysql {{ dbname }} --execute="show tables;"
  register: mysql_tables
  changed_when: false

- name: import database (default source file)
  mysql_db: name={{ item[0] }} state=import target=/var/www/site/vlad_aux/db_io/vlad_up.sql.gz login_password={{ mysql_root_password }} login_user=root
  when: db_import_up and mysql_tables.stdout == ""
  ignore_errors: yes
  tags: mysql_import
  with_nested:
    - dbname

- name: import database (specified source file)
  mysql_db: name={{ item[0] }} state=import target=/var/www/site/vlad_aux/db_io/{{ db_import_up }} login_password={{ mysql_root_password }} login_user=root
  when: db_import_up != true and db_import_up != false and mysql_tables.stdout == ""
  ignore_errors: yes
  tags: mysql_import
  with_nested:
    - dbname