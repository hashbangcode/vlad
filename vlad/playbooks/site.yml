---
- hosts: all
  vars_files:
    - "./vars/defaults/vagrant.yml"
    - "./vars/defaults/general.yml"
    - "./vars/defaults/required.yml"
    - "./vars/defaults/install.yml"
    - [ "vars/defaults/os.yml" ]
    - [ "vars/families/{{ ansible_os_family }}/all.yml", "vars/defaults/os.yml" ]
    - [ "vars/distributions/{{ ansible_distribution_release }}/all.yml", "vars/defaults/os.yml" ]
    - [ "../../settings/vlad_settings.yml", "../../../settings/vlad_settings.yml", "../settings.yml", "vars/dummy_settings.yml" ]
    - [ "../../settings/vlad_local_settings.yml", "../../../settings/vlad_local_settings.yml", "../local_settings.yml", "vars/dummy_settings.yml" ]

  pre_tasks:

    # Run some tasks to de-provision the box if needed

    - name: Ensure Varnish is stopped
      service: name=varnish state=stopped
      when: varnish_install == false
      ignore_errors: yes
      sudo: true

    - name: Ensure Varnish is removed
      apt: pkg=varnish state=absent
      when: varnish_install == false and ansible_os_family == "Debian"
      sudo: true

    - name: Ensure Varnish is removed
      yum: pkg=varnish state=absent
      when: varnish_install == false and ansible_os_family == "RedHat"
      sudo: true

    # Run some pre-provisioning tests to ensure the system will function when provisioned.

    - name: Check for incorrect HTTP port if not running Varnish
      fail: msg="The web server setup you have selected will make the site inaccessable on port 80"
      when: varnish_install == false and http_port != 80

    - name: Check if Varnish & Apache ports match
      fail: msg="The Apache and Varnish ports you have selected are the same and will conflict"
      when: varnish_install and apache_install and varnish_http_port == http_port

    - name: Check PHP version is valid
      fail: msg="PHP version not currently supported by Vlad ({{ php_version }})"
      when: php_version != "5.3" and php_version != "5.4" and php_version != "5.5" and php_version != "5.6"

    - name: Check specified Solr package
      fail: msg="Solr Drupal module is invalid"
      when: drupal_solr_package != "search_api_solr" and drupal_solr_package != "apachesolr"

    - name: Check MailCatcher dependencies
      debug: msg="The 'Ruby' role will be run as it is required to install MailCatcher"
      when: ruby_install == false and mailcatcher_install

    - name: Check Adminer dependencies
      fail: msg="The Apache, PHP and MySQL roles are required to use Adminer"
      when: (adminer_install and apache_install == false) or (adminer_install and php_install == false) or (adminer_install and mysql_install == false)

    - name: Check XHProf dependencies
      fail: msg="The Apache, PHP and MySQL roles are required to use XHProf"
      when: (xhprof_install and apache_install == false) or (xhprof_install and php_install == false) or (xhprof_install and mysql_install == false)

    - name: Check PimpMyLog dependencies
      fail: msg="The Apache, PHP and MySQL roles are required to use PimpMyLog"
      when: (pimpmylog_install and apache_install == false) or (pimpmylog_install and php_install == false)

    - name: Check Imagemagick dependencies
      fail: msg="The PHP role is required to use Imagemagick"
      when: imagemagick_install and php_install == false

    - name: Check Memcached dependencies
      fail: msg="The PHP role is required to use Memcached"
      when: memcached_install and php_install == false

      # Generate variables to be used in playbooks

    - name: get local IPv4 address
      local_action: setup filter=ansible_default_ipv4
      register: local_ipv4_address
      always_run: yes

  roles:

    - role: base

    - { role: samba, tags: ["windows"], when: "is_windows is defined and is_windows == 'true'" }

    - { role: apache, tags: ["apache"], when: "apache_install" }

    - { role: mysql, tags: ["mysql"], when: "mysql_install" }

    - { role: php, when: "php_install" }

    - { role: drupal, when: "php_install" }

    - { role: adminer, tags: ["adminer"], when: "adminer_install" }

    - { role: xhprof, tags: ["xhprof"], when: "xhprof_install" }

    - { role: pimpmylog, tags: ["pimpmylog"], when: "pimpmylog_install" }

    - { role: varnish, tags: ["varnish"], when: "varnish_install" }

    - { role: memcached, tags: ["memcached"], when: "memcached_install" }

    - { role: redis, tags: ["redis"], when: "redis_install" }

    - { role: sendmail, tags: ["sendmail"], when: "sendmail_install" }

    - { role: solr, tags: ["solr"], when: "solr_install" }

    - { role: munin, tags: ["munin"], when: "munin_install" }

    - { role: ruby, tags: ["ruby"], when: "ruby_install" }

    - { role: mailcatcher, tags: ["mailcatcher"], when: "mailcatcher_install" }

    - { role: node, tags: ["node"], when: "node_install" }

    - { role: imagemagick, tags: ["imagemagick"], when: "imagemagick_install" }

    - { role: bling, tags: ["bling"], when: "bling_install" }

  post_tasks:

    - name: move default index.php file into docroot directory
      template: src=templates/index.j2 dest=/var/www/site/docroot/index.php force=no
      when: add_index_file

    # Run post provisioning tests to ensure everything has been provisioned correctly.
    - include: tests/main.yml
      tags: test

  handlers:

    - include: common/handlers/main.yml
